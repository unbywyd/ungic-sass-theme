@use "sass:string" as str;
@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "ungic-sass-utils" as *;

@function hsl($color, $strip-unit: true, $asmap: false) {
  // Проверка, что входное значение — цвет
  @if (meta.type-of($color) != "color") {
    @warn '#{$color} is не цвет';
    @return ();
  }

  // Извлечение каналов H, S, L из цветового пространства HSL
  // Важно: $space: hsl передается как идентификатор, без кавычек
  $h: color.channel($color, "hue", $space: hsl);
  $s: color.channel($color, "saturation", $space: hsl);
  $l: color.channel($color, "lightness", $space: hsl);

  // Удаление единиц измерения, если требуется
  @if ($strip-unit) {
    $h: strip-unit($h);
    $s: strip-unit($s);
    $l: strip-unit($l);
  }

  // Возврат результата в виде списка или карты
  @if (not $asmap) {
    @return ($h, $s, $l);
  } @else {
    @return (h: $h, s: $s, l: $l);
  }
}

@function lightest($color1, $color2) {
  $hsl-color1: list.nth(hsl($color1), 3);
  $hsl-color2: list.nth(hsl($color2), 3);
  @if $hsl-color1 > $hsl-color2 {
    @return $color1;
  }
  @return $color2;
}

@function darkest($color1, $color2) {
  $hsl-color1: list.nth(hsl($color1), 3);
  $hsl-color2: list.nth(hsl($color2), 3);
  @if $hsl-color1 < $hsl-color2 {
    @return $color1;
  }
  @return $color2;
}

@function is-darker($this-color, $than-this-color) {
  $hsl-color1: list.nth(hsl($this-color), 3);
  $hsl-color2: list.nth(hsl($than-this-color), 3);
  @return $hsl-color1 < $hsl-color2;
}
