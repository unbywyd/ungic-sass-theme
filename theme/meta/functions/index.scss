@use "sass:string" as str;
@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "ungic-sass-utils" as *;


@function hsl($color, $strip-unit: true, $asmap: false) {
    @if('color' != type-of($color)) {
        @warn '#{$color} is not a color';
        @return ();
    }

    $h: color.hue($color);
    $s: color.saturation($color);
    $l: color.lightness($color);

    @if($strip-unit) {
        $s: strip-unit(color.saturation($color));
        $l: strip-unit(color.lightness($color));
        $h: strip-unit(color.hue($color));
    }

    @if(not $asmap) {
        @return ($h, $s, $l);
    }

    @else {
        @return (h: $h,
            s: $s,
            l: $l);
    }
}

@function lightest($color1, $color2) {
    $hsl-color1: list.nth(hsl($color1), 3);
    $hsl-color2: list.nth(hsl($color2), 3);
    @if $hsl-color1 > $hsl-color2 {
        @return $color1;
    }
    @return $color2;
}

@function darkest($color1, $color2) {
    $hsl-color1: list.nth(hsl($color1), 3);
    $hsl-color2: list.nth(hsl($color2), 3);
    @if $hsl-color1 < $hsl-color2 {
        @return $color1;
    }
    @return $color2;
}

@function is-darker($this-color, $than-this-color) {
    $hsl-color1: list.nth(hsl($this-color), 3);
    $hsl-color2: list.nth(hsl($than-this-color), 3);
    @return $hsl-color1 < $hsl-color2;
}
